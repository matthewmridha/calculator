{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MAXDIGIT","operators","endsWithOperators","endsWithNeg","endsWithNumber","App","props","state","currentValue","formula","evaluated","displayLimit","bind","handleNumber","handleClear","handleDelete","handleDecimal","handleOperator","handleEquals","cValue","this","cFormula","test","setState","expression","result","Math","round","eval","toString","e","operator","target","value","eavaluated","slice","previousValue","tempValue","setTimeout","length","newValue","cFunction","includes","className","Display","display","Buttons","React","Component","id","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.616bda68.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n// Variables //\n\nconst MAXDIGIT = 16;\n\n// REGEX //\n\nconst operators = /[-+/%*]/;\nconst endsWithOperators = /[-+/%*]$/;\nconst endsWithNeg = /-$/;\nconst endsWithNumber = /[0-9]$/;\n\n// COMPONENTS //\n\n// MAIN //\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentValue: \"0\",\n      formula: \"\",\n      evaluated: false\n    };\n    this.displayLimit = this.displayLimit.bind(this);\n    this.handleNumber = this.handleNumber.bind(this);\n    this.handleClear = this.handleClear.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleDecimal = this.handleDecimal.bind(this);\n    this.handleOperator = this.handleOperator.bind(this);\n    this.handleEquals = this.handleEquals.bind(this);\n  };\n\n  // Equals button to execute function //\n  \n  handleEquals() {\n    const cValue = this.state.currentValue;\n    const cFormula = this.state.formula;\n    if (endsWithNumber.test(cValue)) {\n      if (this.state.formula === \"\") {\n        this.setState(state => {\n          return {\n            formula: cValue,\n            currentValue: \"\",\n            evaluated: true\n          };\n        });\n      } else {\n        let expression = cFormula + cValue;\n        let result =\n          // eslint-disable-next-line no-eval\n          Math.round(10000000000000000000 * eval(expression)) /\n          10000000000000000000;\n        this.setState(state => {\n          return {\n            formula: \"\",\n            currentValue: result.toString(),\n            evaluated: true\n          };\n        });\n      }\n    };\n  };\n\n  // *,+,-,/ handles operator functions //\n  \n  handleOperator(e) {\n    const operator = e.target.value;\n    const cValue = this.state.currentValue;\n    const cFormula = this.state.formula;\n    // if a formula has been evaluated with =, to add to the answer //\n    if (this.state.eavaluated === true) {\n      this.setState(state => {\n        return {\n          formula: cFormula + operator,\n          currentValue: operator,\n          evaluated: false\n        };\n      });\n    } else {\n      // if new formula //\n      if (!endsWithOperators.test(cValue)) {\n        this.setState(state => {\n          return {\n            previousValue: cValue,\n            formula: cFormula + cValue + operator,\n            currentValue: operator\n          };\n        });\n      } else if (operator === \"-\") {\n        // faciliates input of negetive values //\n        this.setState(state => {\n          return {\n            formula: cFormula,\n            currentValue: operator\n          };\n        });\n      } else {\n        // handles input of two or more simaltaneous operators //\n        this.setState(state => {\n          return {\n            formula: cFormula.slice(0, -1) + operator,\n            currentValue: operator\n          };\n        });\n      }\n    }\n  };\n\n  // if the display capacity limit have been reached //\n  \n  displayLimit() {\n    const tempValue = this.state.currentValue;\n    this.setState(state => {\n      return { \n        currentValue: \"MAX CHAR REACHED\", \n      };\n    });\n    setTimeout(() => {\n      this.setState(state => {\n        return { \n          currentValue: tempValue,\n        };\n      });\n    }, 1000);\n  };\n\n  // AC (all clear) button, clears display and function. //\n  \n  handleClear() {\n    this.setState(state => {\n      return { \n        currentValue: \"0\", \n        formula: \"\" \n      };\n    });\n  };\n  \n  // DEL (delete) button, erases last character from current value //\n\n  handleDelete() {\n    const value = this.state.currentValue;\n    if (value.length === 1) {\n      this.setState(state => {\n        return { \n          currentValue: \"0\", \n        };\n      });\n    } else {\n      const newValue = value.slice(0, -1);\n      this.setState(state => {\n        return { \n          currentValue: newValue, \n        };\n      });\n    }\n  };\n\n  // 0-9, handles number inputs//\n  \n  handleNumber(e) {\n    const value = e.target.value;\n    const cValue = this.state.currentValue;\n    const cFunction = this.state.formula;\n    if (cValue.length <= MAXDIGIT) {\n      // as long as screen cappacity has not been reached //\n      if (!endsWithNeg.test(cFunction) && cValue === \"-\") {\n        // to facialte entering negetive values //\n        this.setState(state => {\n          return {\n            currentValue: cValue + value,\n          };\n        });\n      } else if (cValue === \"0\" || operators.test(cValue) || this.state.evaluated === true) {\n        // when entered after a 0 or operator //\n        this.setState(state => {\n          return { \n            currentValue: value, \n          };\n        });\n      } else {\n        this.setState(state => {\n          // default //\n          return { \n            currentValue: state.currentValue + value, \n          };\n        });\n      }\n    } else {\n      // if screen capacity has been reched //\n      this.displayLimit();\n    }\n  };\n\n  // . handles the use of the decimal button //\n  \n  handleDecimal() {\n    const cValue = this.state.currentValue;\n    // within screen limit //\n    if (cValue.length <= MAXDIGIT) {\n      // prevents multiple \".\"s in one value //\n      if (!cValue.includes(\".\")) {\n        // enterd after a number //\n        if (!operators.test(cValue)) {\n          this.setState(state => {\n            return { currentValue: cValue + \".\" };\n          });\n        } else {\n          // entered with no number before so converted to 0. //\n          // eslint-disable-next-line no-unused-vars\n          const cFormula = this.state.formula;\n          this.setState(state => {\n            return { currentValue: \"0.\" };\n          });\n        }\n      }\n    } else {\n      // screen capacity reached // \n      this.displayLimit();\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"calculator\">\n        <Display\n          display={this.state.currentValue}\n          formula={this.state.formula}\n        />\n        <Buttons\n          handleNumber={this.handleNumber}\n          handleClear={this.handleClear}\n          handleDelete={this.handleDelete}\n          handleDecimal={this.handleDecimal}\n          handleOperator={this.handleOperator}\n          handleEquals={this.handleEquals}\n          \n        />\n      </div>\n    );\n  }\n};\n\n// Display screen component //\n\nclass Display extends React.Component {\n  render() {\n    return (\n      <div id=\"screen\">\n        <div id=\"display\">\n          <p>{this.props.display}</p>\n        </div>\n        <div id=\"formula\">\n          <p>{this.props.formula}</p>\n        </div>\n      </div>\n    );\n  }\n};\n\n// KeyPad component //\n\nclass Buttons extends React.Component {\n  render() {\n    return (\n      <div className=\"buttons\">\n        <button\n          id=\"zero\"\n          value=\"0\"\n          className=\"numbers\"\n          onClick={this.props.handleNumber}\n        >\n          0\n        </button>\n        <button\n          id=\"one\"\n          value=\"1\"\n          className=\"numbers\"\n          onClick={this.props.handleNumber}\n        >\n          1\n        </button>\n        <button\n          id=\"two\"\n          value=\"2\"\n          className=\"numbers\"\n          onClick={this.props.handleNumber}\n        >\n          2\n        </button>\n        <button\n          id=\"three\"\n          value=\"3\"\n          className=\"numbers\"\n          onClick={this.props.handleNumber}\n        >\n          3\n        </button>\n        <button\n          id=\"four\"\n          value=\"4\"\n          className=\"numbers\"\n          onClick={this.props.handleNumber}\n        >\n          4\n        </button>\n        <button\n          id=\"five\"\n          value=\"5\"\n          className=\"numbers\"\n          onClick={this.props.handleNumber}\n        >\n          5\n        </button>\n        <button\n          id=\"six\"\n          value=\"6\"\n          className=\"numbers\"\n          onClick={this.props.handleNumber}\n        >\n          6\n        </button>\n        <button\n          id=\"seven\"\n          value=\"7\"\n          className=\"numbers\"\n          onClick={this.props.handleNumber}\n        >\n          7\n        </button>\n        <button\n          id=\"eight\"\n          value=\"8\"\n          className=\"numbers\"\n          onClick={this.props.handleNumber}\n        >\n          8\n        </button>\n        <button\n          id=\"nine\"\n          value=\"9\"\n          className=\"numbers\"\n          onClick={this.props.handleNumber}\n        >\n          9\n        </button>\n        <button\n          id=\"add\"\n          value=\"+\"\n          className=\"operators\"\n          onClick={this.props.handleOperator}\n        >\n          +\n        </button>\n        <button\n          id=\"subtract\"\n          value=\"-\"\n          className=\"operators\"\n          onClick={this.props.handleOperator}\n        >\n          -\n        </button>\n        <button\n          id=\"divide\"\n          value=\"/\"\n          className=\"operators\"\n          onClick={this.props.handleOperator}\n        >\n          /\n        </button>\n        <button\n          id=\"multiply\"\n          value=\"*\"\n          className=\"operators\"\n          onClick={this.props.handleOperator}\n        >\n          X\n        </button>\n        <button\n          id=\"equals\"\n          value=\"=\"\n          className=\"enter\"\n          onClick={this.props.handleEquals}\n        >\n          =\n        </button>\n        <button id=\"clear\" value=\"clear\" onClick={this.props.handleClear}>\n          AC\n        </button>\n        <button\n          id=\"decimal\"\n          value=\".\"\n          className=\"numbers\"\n          onClick={this.props.handleDecimal}\n        >\n          .\n        </button>\n        \n        <button id=\"delete\" value=\"delete\" onClick={this.props.handleDelete}>\n          DEL\n        </button>\n      </div>\n    );\n  }\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}